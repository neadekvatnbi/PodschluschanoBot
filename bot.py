import logging
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, MessageHandler, CallbackContext, CallbackQueryHandler, filters
import requests

TOKEN = "7920636690:AAFj5XUo8GepoQ6MLnoqBKUEP4wsr_9b8rc"  # –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMINS_GROUP_ID = -1002699386364  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
PUBLIC_GROUP_ID = -1002655152911  # ID –≥—Ä—É–ø–ø—ã "–ü–æ–¥—Å–ª—É—à–∞–Ω–æ"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
async def keep_alive():
    while True:
        await asyncio.sleep(30)
        requests.get("https://your-railway-url.com")  # –ü—Ä–∏–º–µ—Ä –¥–ª—è Railway

async def handle_message(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' –∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'."""
    message_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{update.message.message_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{update.message.message_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await context.bot.send_message(
            chat_id=ADMINS_GROUP_ID,
            text=f"üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n\n{message_text}",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–∞–º–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É: {e}")

async def publish_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å
    message_id = int(query.data.split("_")[1])
    logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ callback_query
    try:
        original_message_text = query.message.text
        logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {original_message_text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É "–ü–æ–¥—Å–ª—É—à–∞–Ω–æ"
    try:
        await context.bot.send_message(
            chat_id=PUBLIC_GROUP_ID,
            text=f"üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n\n{original_message_text}",
            parse_mode="Markdown"
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É '–ü–æ–¥—Å–ª—É—à–∞–Ω–æ'")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É '–ü–æ–¥—Å–ª—É—à–∞–Ω–æ': {e}")
        await query.edit_message_text(text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
    await query.edit_message_text(text="‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")

async def reject_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å' –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã."""
    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º
    message_id = int(query.data.split("_")[1])
    logger.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã
    try:
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=message_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã: {e}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
    await query.edit_message_text(text="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"
application.add_handler(CallbackQueryHandler(publish_message, pattern="^publish_"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
application.add_handler(CallbackQueryHandler(reject_message, pattern="^reject_"))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(keep_alive())  # –ó–∞–ø—É—Å–∫–∞–µ–º keep_alive
    loop.run_until_complete(application.run_polling())  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
